-------------------------------------------------------------------------
if you are like me i constantly forget to switch between my work git and personal, this command will help you switch the commits

git filter-branch --env-filter '
OLD_EMAIL="YOUR_OLD_EMAIL"
CORRECT_NAME="YOUR_NEW_USERNAME"
CORRECT_EMAIL="YOUR_NEW_EMAIL"
if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
then
    export GIT_COMMITTER_NAME="$CORRECT_NAME"
    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
then
    export GIT_AUTHOR_NAME="$CORRECT_NAME"
    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
fi
' --tag-name-filter cat -- --branches --tags


git config user.email hendrikus.hpvk@gmail.com
git config user.name 'vankatwijk'

-------------------------------------------------------------------------
rewriting a commit into the past

git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 2bdebf7ee2383de5b587d17c34223c1f5e3ec386 ]
     then
         export GIT_AUTHOR_DATE="Sun Apr 26 13:45:53 2020 -0800"
         export GIT_COMMITTER_DATE="Sat Apr 27 12:46:01 2020 -0700"
     fi'
-----------------------------------------------------------------------
# Amend only AUTHOR_DATE. Careful, hash changes after amendment.
git commit --amend --date="YYYY-MM-DDThh:mm:ss±hh:mm" -C 28f2d7b81e037aa4fcdf45f6353cb7c2aa10e336

# Amend both COMMITTER_DATE and AUTHOR_DATE.
GIT_COMMITTER_DATE="YYYY-MM-DDThh:mm:ss±hh:mm" git commit --amend --date="YYYY-MM-DDThh:mm:ss±hh:mm" -C HEAD~2


-----------------------------------------------------------------------

#before commit
export GIT_AUTHOR_DATE="YYYY-MM-DDThh:mm:ss±hh:mm"
export GIT_COMMITTER_DATE="YYYY-MM-DDThh:mm:ss±hh:mm"

revert back, just close terminal or
unset GIT_AUTHOR_DATE
unset GIT_COMMITTER_DATE



